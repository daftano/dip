#####################################################
# gnudip.conf
#
# This is the GnuDIP sample configuration file.
#
# See COPYING for licensing information.
#
#####################################################

# Parameter values accumulate
#   parm = value1
#   parm = value2
# is the same as
#   parm = value1 value2
# Only use when a list of parameters is allowed

### parameters common to cgi and inet ###

# User name to connect to the database
gnudipuser = gnudip

# Password to connect to the database
gnudippassword = gnudippass

# Name of gnudip database
gnudipdatabase = gnudip2

# Host where the database server resides
# - not needed for local access
#gnudipserver = localhost

# default BIND nsupdate command
#nsupdate = /usr/local/gnudip/sbin/gdipnsupd.sh
#  uncomment the line above to trap nsupdate using the sample script
#nsupdate = /usr/local/gnudip/sbin/multinsupd.pl
#  uncomment the line above to trap nsupdate for alias processing
# tinydns backend
#nsupdate = /usr/local/gnudip/sbin/gdipbkclt.pl tinydns
#tinydns = YES
# BIND 8
#nsupdate = /usr/bin/nsupdate -v -k /usr/local/gnudip/etc:gnudip-key.
# BIND 9
nsupdate = /usr/bin/nsupdate -v
nsupdate = -k /usr/local/gnudip/etc/Kgnudip-key.+157+36000.private

# BIND nsupdate commands for specific domains
# for specific domain do.main
# BIND 8
#nsupdate.do.main = /usr/bin/nsupdate -v -k /usr/local/gnudip/etc:gnudip-key.
# BIND 9
#nsupdate.do.main = /usr/bin/nsupdate -v
#nsupdate.do.main = -k /usr/local/gnudip/etc/Kgnudip-key.+157+36000.private
# use legacy BIND back end for dyn3.yourhost.com
#nsupdate.dyn3.yourhost.com = /usr/local/gnudip/sbin/gdipbkclt.pl oldBIND.dyn3
# use tinydns back end for dyn.tinydns.de
#nsupdate.dyn.tinydns.de = /usr/local/gnudip/sbin/gdipbkclt.pl tinydns
#tinydns.dyn.tinydns.de = YES

# default TTL value for zone records added with nsupdate
# - defaults to zero if not present
TTL = 60

# TTL value for domain do.main
# - at either user or domain level
#TTL.do.main = 300

# sendmail command (or sendmail clone)
# - An mail alias to direct mail for the "return path" user (the GnuDIP "nobody"
# - user unless "-f" is used) to /dev/null is also a good idea, so returned mail
# - for a bad E-mail address disappears.
#sendmail = /usr/sbin/sendmail -t -f noreturnpath
#sendmail = /usr/lib/sendmail -t -f noreturnpath
sendmail = /usr/sbin/sendmail -t

# list of acceptabe and unacceptable IP networks
# - network/netmask format
#   (e.g. 0.0.0.0/0.0.0.0 means any)
# - "/netmask" is optional; defaults to "/255.255.255.255"
# - seperated by spaces, or on seperate lines
# - prepend "!" for "unacceptable", with no space after
#   (e.g. !207.46.230.218 means not microsoft.com)
networks = 0.0.0.0/0.0.0.0
#networks = 127.0.0.1
#networks = 192.168.0.0/255.255.255.0

# require IP address to be sent for update request type 0
# - Legacy GnuDIP did not include the IP address in the
#   type 0 message. The current server will revert to the
#   legacy behaviour unless "require_address" is set to "yes".
#   A message is written to the log though.
# - Because the legacy client has other shortcomings, if
#   possible you should say "yes" here to stop it from being
#   used.
#require_address = yes

# User pattern, domain and password for "dummy" hosts.
# - For type 2 update requests with a user matching this pattern, and
# - a domain and password matching this domain and password, the
# - update servers will just send back the type 2 response with the IP
# - address the server sees the client at.
# - In the user pattern:
# -   "?" matches any one character
# -   "*" matches zero or more characters
#dummyuser = dummy*
#dummydomn = dummy
#dummypswd = dummy

# for global preferences "table" in a flat file
# - defaults to ./run/database/globalprefs in GnuDIP directory
#globalprefs_file = /usr/local/gnudip/run/database/globalprefs

# for users "table" in directory of flat files
# - directory containing the files
# - defaults to ./run/database/users in GnuDIP directory
#users_dir = /usr/local/gnudip/run/database/users

### parameters for cgi ###

# logger command for cgi script
logger_cgi = /usr/bin/logger -t gnudip-www

# logger command for update script
logger_updt = /usr/bin/logger -t gnudip-updt

# life span in seconds of HTTP update salt prompt
timeout_updt = 60

# use persistance under mod_perl
# must be YES in capitols to enable
persistance = YES

# prefix for names for files used by "Check for robots before
# sending E-mail" feature
# - defaults to "/tmp/gdipnrb_"
#no_robots_prfx = /tmp/gdipnrb_

# command to generate image for "Check for robots before
# sending E-mail" feature
# - defaults to "/usr/local/gnudip/sbin/textimage.sh"
#no_robots_imgcmd = /usr/local/gnudip/sbin/textimage.sh

# URL to do forgotten password
#URL_sendURL = /ddns/send_URL.php

# URL to do self registration
#URL_self_signup = /ddns/self_signup.php

# URL to do self deletion
# must have a question mark and any other parameters already in it
# will be extended with:
#   user=user_name&domn=domain_name&sign=signature
# "signature" is md5 hash of "user_name.domain_name.server_key"
#   (note: actual periods inserted between pieces)
#   converted to base 64 representation
# see the code or just try it if in doubt
#URL_delthisuser = /ddns/self_delete.php?

# html directory relative to the CGI
# - defaults to ../html
#html_dir = ../html

# HTML header file
# included after <body> in each page
#header_file = /usr/local/gnudip/html/header.html

# HTML trailer file
# included before </body> in each page
#trailer_file = /usr/local/gnudip/html/trailer.html

### parameters for inet ###

# logger command for inet server
logger_inet = /usr/bin/logger -t gnudip-net

# seconds to wait for response to salt prompt
timeout = 10

### parameters for rmaint ###

# logger command for rmaint server
logger_rmaint = /usr/bin/logger -t gnudip-rmaint

# password for access to rmaint server using clear text
#password_rmaint = 

# seconds to wait for response to salt prompt
timeout_rmaint = 10

